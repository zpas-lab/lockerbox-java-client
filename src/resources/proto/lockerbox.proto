package lockerbox;

// To generate go objects:
// protoc --go_out=.. *.proto

//TODO
// uzupelnic requesy dla kazdego scenariusza (jak ma wygladac valid request)
option java_package = "com.zpaslab.lockerbox";
option java_outer_classname = "LockerboxProtos";


// Represents amount of money.
message Money {
    // Amount of represented money described in the smallest unit available for the given currency.
    // E.g. 10.18PLN = 1018 atom.
    optional int64 atom = 1;
    // Read only view of the atom, for ease of reading.
    // Does not contain currency code, so for 10.18 PLN, value="10.18"
    //
    // Value will be set in data sent from the overmind server.
    // Value will be ignored in data sent to the overmind server (in case of divergence between atom and value, atom is used).
    optional string value = 2;
    // Currency code, as in ISO 4217.
    // For now, only "PLN" & "BYR" are supported.
    optional string currency = 3;
}

message Charges {
    repeated Charge charge = 1;
    optional Money total_amount = 2;
    optional Payment payment = 3;
    // TODO(mateuszc): add flexible extra data for receipt printing
}

// Charge is sth that user is paying for (e.g. increasing the balance, or for parcel batch).
// Charge is created for recording purposes == where did the user money go to?
// You can also think about Charge as shopping cart items - each item in shopping cart is a request for the
// shop to give you something (increase balance, pay for parcel) - it will be yours, once you pay for it (create payment).
//
// NOTE: user cannot create Charges: they are created when some type of operation in the system is made
// (e.g. request to update account balance, creating parcel with ONLINE payment).
//
// TODO(pawelb): embed sibling Charges and matched Payment?
message Charge {

    enum Category {
        // Charge for shipment
        SHIPMENT = 1;
        // Additional post services, which don't clearly classify as shipment.
        // e.g. fee for sending COD (cash on delivery) money back to sender
        POST_SERVICE = 2;
        // Cash on delivery, money should be sent to person defined in transferee
        COD = 3;
        // Tax
        TAX = 4;
        // Customs
        CUSTOMS = 5;
        // Charge used to increase internal account balance.
        // Requires the Transferee to be set to account.
        ACCOUNT_BALANCE = 6;
        // Represents money which was taken from user, although we didn't want to.
        // The money is marked to be transferred to user's mobile phone account.
        // Known cases include:
        //  - user paid too much with cash but we couldn't return change
        //  - user paid too little with cash but we couldn't return it
        //  - user double-paid for a parcel (it was paid in overmind, but agent had no connection, then again
        //    paid in agent while still disconnected)
        // The Transferee.Account should be set.
        OVERPAY_MOBILE = 7;
    }

    message Transferee {
        // if the Charge should be transferred back to one of system users, it's the account's login
        optional string account = 1;
        // if the Charge should be transfered using wire transfer, here are the technical details (account number?)
        optional string wire = 2;
        // additional details for the transfer
        optional string details = 3;
        // phone information - to be used in OVERPAY_MOBILE
        optional string name = 4;
        optional string phone = 5;
        optional string phone_carrier = 6;
    }

    enum Status {
        // Pending is when Charge is created, but there is no payment that would make the Charge effective
        // (e.g. Charge created for updating account will not update the account, until it is matched with
        // a payment).
        PENDING = 1;
        // There was a payment matched with this Charge, but it is not applied yet.
        MATCHED = 2;
        // Payment for the Charge was successful, and the action associated with the Charge is done.
        APPLIED = 3;
        // the Charge has expired (e.g. temporary parcel without a payment).
        EXPIRED = 4;
        // User cancelled the Charge (it won't be matched with any payment now).
        CANCELLED = 5;
    }

    // code is globally unique identifier of Charge.
    optional string code = 1;

    optional string href = 2;
    // tag is used to match Charges with Payment.
    //
    // Tag value will be:
    // - equal to Charge.Code, if there is 1-to-1 relationship between Charges and Payment
    // - same, account-unique value in all Charges, if there is many-to-1 relationship between Charges and Payment
    //
    // Payment.charge_tag should be set to the final tag value (either unique or copied from Charge.code).
    optional string tag = 3;
    optional Category category = 4;

    // specific type within category
    // Might define details of the shipment service (express, overweight), post service (insurance, extra wire transfer),
    // customs (luxury goods) etc.
    //
    // Required for category = POST_SERVICE, TAX, CUSTOMS
    optional string type = 5;
    // human readable description of type
    optional string description = 6;
    // required for category = COD, TAX, CUSTOMS, ACCOUNT_BALANCE, OVERPAY_MOBILE
    optional Transferee transferee = 7;

    optional Money amount = 8;

    // status of the operation
    optional Status status = 9;
    optional string expiration_date = 10;

    // if the Charge is created because of a parcel (charge for parcel or overpay), it should have the parcel_ref
    // set to parcel.Code.
    optional string parcel_ref = 11;
}

message ChargeList {
    repeated Charge charge = 1;
    optional int32 total = 2;
}

// Payment is a description of how user will pay for something (action, item, ...?) in the system.
// It has information about:
// 1) how much will user pay
// 2) how will user pay
// 3) what is the user paying for == what actions (Charges) should be applied once the Payment is successful.
//
// Non-failed Payment is always associated with at least one Charge.
//
// Supported means of payment:
// - using prepaid account (amount will be subtracted from the account balance)
// - paying online via online gateway (user will have to open given link in his browser and authorize the payment with online payment operator).
// TODO(pawelb): embed matched Charges?
// Next id: 14
message Payment {
    enum Method {
        BALANCE = 1;
        ONLINE = 2;
        CASH = 3;
        CREDIT_CARD = 4;
    }

    enum Status {
        NOT_STARTED = 1;
        PENDING = 2;
        // Payment was successful (e.g. confirmed by external Payment operator), but its effects have not been applied yet.
        SUCCESS = 3;
        // Payment effects have been applied (all Charges associated with the Payment have been successfully executed).
        APPLIED = 4;
        FAILED = 5;
        EXPIRED = 6;
    }

    // Details for ONLINE payment method.
    // TODO(pawelb): so far, I am modelling this object using bluemedia workflow.
    // OTOH, browser_link and return_link seems quite general, so I am not creating separate subtype now.
    message Online {
        // only supported = bluemedia
        optional string operator = 1;
        // Payment gateway link
        optional string browser_url = 2;
        // Where should the user browser go, once the payment is processed?
        optional string return_url = 3;
    }

    // Details for CREDIT_CARD payment method.
    message CreditCard {
        // e.g. MasterCard, Visa (optionally issuer's code, e.g. 51 or 4)
        optional string issuer = 1;
        // Usually PAN (Primary Account Number), see e.g.:
        // https://en.wikipedia.org/wiki/Primary_Account_Number
        optional string card_number = 2;
        optional string terminal_id = 3;
        optional string authorization_code = 4;
        // [Wikipedia: Retrieval Reference Number, a key to uniquely identify a
        // card transaction based on the ISO 8583 standard]
        optional string rrn = 5;
        // TODO(mateuszc): add 'ordinary_number'? or is it common counter with
        // CASH payments? when should it be issued, on receipt printing or on
        // money accepted? should failed transactions also be included in
        // counting?
    }

    message HistoryItem {
        optional string date = 1;
        // Human description of the item
        optional string description = 2;
        optional string debug_type = 3;
        optional bytes debug_data = 4;
    }

    optional string code = 1;
    // login of account that Payment is associated with
    optional string account = 2;
    optional string href = 3;

    // Tag of Charge(s) that should be applied once the Payment is successful.
    //
    // Total sum of all Charges associated with the Payment will be compared to Payment amount.
    // Charges will be applied only if the total sum match the Payment amount.
    optional string charges_tag = 4;

    // how much are you paying?
    // If left empty, Amount will be calculated automatically from the Charges that the Payment is associated with.
    // If set, the amount should match exactly the total sum of all Charges associated with the Payment.
    optional Money amount = 5;

    optional Method method = 6;
    optional Online online = 7;
    optional CreditCard credit_card = 12;

    // Status of the payment
    optional Status status = 8;
    // Extended status of the payment (details about the status that might be method specific)
    optional string status_details = 9;

    repeated HistoryItem history = 10;

    // Point in time when the payment was done by user (money was deposited).
    optional string deposit_date = 11;
    // Point in time when the payment was acknowledged by overmind
    //
    // conslidation_date will be set only for finalized payments (status = SUCCESS, APPLIED, FAILED, EXPIRED)
    optional string consolidation_date = 13;
}

message PaymentList {
    repeated Payment payment = 1;
    optional int32 total = 2;
}

message Error {
    // Only a subset of system codes; to be extended later
    enum Code {
        UNKNOWN = 1;

        VALIDATION_INVALID_PARAM_VALUE = 601;
        VALIDATION_UNKNOWN_PARAM = 602;
        VALIDATION_MISSING_REQUIRED_PARAM = 603;
        VALIDATION_INVALID_REQUEST = 617;
        // next id: 2004
        AUTH_INVALID_REQUEST = 2001;
        AUTH_INVALID_TOKEN = 2002;
    }

    message TranslatedMessage {
        optional string lang = 1;
        optional string description = 2;
    }

    optional Code code = 1;
    optional string code_msg = 2;
    repeated TranslatedMessage user_msg = 3;
    optional string dev_msg = 4;
    // True is this is a system (backend) error.
    optional bool system = 5;
    optional bool validation = 6;
    // If the error is retryable = another call with the same arguments may succeed.
    optional bool retryable = 7;
}

message Errors {
    repeated Error error = 1;
}
